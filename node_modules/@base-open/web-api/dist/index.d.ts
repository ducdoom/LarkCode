/**
 * @description blockit通信的包的数据结构
 */
type Formula = string;
type Sort = string;
declare enum IOpenSegmentType {
    Text = "text",
    Url = "url",
    Mention = "mention"
}
declare enum OpenMentionTypeMap {
    User = 0,
    Doc = 1,
    Folder = 2,
    Sheet = 3,
    SheetDoc = 4,
    Chat = 5,
    Bitable = 8,
    Mindnote = 11,
    Box = 12,
    Slide = 15,
    Wiki = 16,
    Docx = 22,
    Bitable_Ind = 108
}
/** mention 类型，区分不同类型的飞书云文档或者飞书用户 */
type OpenMentionType = keyof typeof OpenMentionTypeMap;
/** 普通文本 */
type IOpenTextSegment = {
    type: IOpenSegmentType.Text;
    text: string;
};
/** 链接 */
type IOpenUrlSegment = {
    type: IOpenSegmentType.Url;
    text: string;
    link?: string;
};
/** 多行文本中「飞书云文档链接」或「@飞书成员」的类型 */
interface IOpenMentionSegment {
    type: IOpenSegmentType.Mention;
    mentionType: OpenMentionType;
    text: string;
    token: string;
}
/** 多行文本中「@飞书成员」的类型 */
interface IOpenUserMentionSegment extends IOpenMentionSegment {
    mentionType: 'User';
    name: string;
    en_name?: string;
}
/** 多行文本中「飞书云文档链接」的类型 */
interface IOpenDocumentMentionSegment extends IOpenMentionSegment {
    mentionType: Exclude<OpenMentionType, 'User'>;
    link: string;
}
/** 「多行文本」字段单元格类型 */
type IOpenSegment = IOpenTextSegment | IOpenUrlSegment | IOpenUserMentionSegment | IOpenDocumentMentionSegment;
/** 「单向关联」/「双向关联」字段单元格类型 */
type IOpenLink = {
    record_ids: string[];
    table_id: string;
    text: string;
    /** 暂时只支持 "text" */
    type: string;
};
/** 「单选」字段单元格类型 */
type IOpenSingleSelect = {
    id: string;
    text: string;
};
/** 「多选」字段单元格类型 */
type IOpenMultiSelect = IOpenSingleSelect[];
/** 「人员」 / 「创建人」 / 「修改人」字段单元格类型 */
type IOpenUser = {
    /** 暂未支持 open_id 转换 */
    id: string;
    name?: string;
    en_name?: string;
    email?: string;
};
/** 「地理位置」字段单元格类型 */
type IOpenLocation = {
    address: string;
    adname: string;
    cityname: string;
    /** 完整地址 */
    full_address: string;
    /** "number,number" */
    location: string;
    /** 简短地址 */
    name: string;
    /** 省 */
    pname: string;
};
/** 「附件」字段单元格类型（多值） */
type IOpenAttachment = {
    name: string;
    size: number;
    type: string;
    token: string;
    timeStamp: number;
};
/** 「日期」/「修改时间」/「创建时间」字段单元格类型，毫秒时间戳 */
type IOpenTimestamp = number;
/** 「数字」字段单元格类型 */
type IOpenNumber = number;
/** 「复选框」字段单元格类型 */
type IOpenCheckbox = boolean;
/** 「自动编号」字段单元格类型 */
type IOpenAutoNumber = string;
/** 「电话号码」字段单元格类型 */
type IOpenPhone = string;
/** 「群字段」字段单元格类型 */
type IOpenGroupChat = {
    id: string;
    name: string;
    avatarUrl: string;
    en_name?: string;
    linkToken?: string;
};
/** 字段单值 */
type IOpenSingleCellValue = IOpenSingleSelect | IOpenUser | IOpenTimestamp | IOpenNumber | IOpenCheckbox | IOpenAutoNumber | IOpenPhone | IOpenLocation | IOpenAttachment | IOpenSegment | IOpenUrlSegment | IOpenGroupChat | IOpenLink;
type IOpenFormulaProxyCellValue = IOpenSingleCellValue[] | null;
type IOpenFormulaFuncCellValue = IOpenSegment[] | number[] | number | string;
/** 公式字段出值结果 */
type IOpenFormulaCellValue = IOpenFormulaProxyCellValue | IOpenFormulaFuncCellValue;
/** 单元格联合类型，使用时建议使用 checkers 断言这个类型的数据 */
type IOpenCellValue = null | IOpenSingleSelect | IOpenMultiSelect | IOpenUser[] | IOpenTimestamp | IOpenNumber | IOpenCheckbox | IOpenAutoNumber | IOpenPhone | IOpenLocation | IOpenAttachment[] | IOpenSegment[] | IOpenUrlSegment[] | IOpenLink | IOpenGroupChat[] | IOpenFormulaCellValue;

declare enum WidgetBaseEvent {
    TableAdd = "TableAdd",
    TableDelete = "TableDelete",
    SelectionChange = "SelectionChange",
    PermissionChange = "PermissionChange",
    UploadStatusChange = "UploadStatusChange"
}
declare enum WidgetFieldEvent {
    Todo = "todo"
}
declare enum WidgetTableEvent {
    FieldAdd = "FieldAdd",
    FieldDelete = "FieldDelete",
    FieldModify = "FieldModify",
    RecordModify = "RecordModify"
}
declare enum BridgeEvent {
    DataChange = "DataChange",
    ThemeChange = "ThemeChange"
}

interface Selection {
    baseId: string | null;
    tableId: string | null;
    viewId: string | null;
    fieldId: string | null;
    recordId: string | null;
}

/**
 * copy from bitable-sdk
 */
declare enum FieldType {
    NotSupport = 0,
    Text = 1,
    Number = 2,
    SingleSelect = 3,
    MultiSelect = 4,
    DateTime = 5,
    Checkbox = 7,
    User = 11,
    Phone = 13,
    Url = 15,
    Attachment = 17,
    SingleLink = 18,
    Lookup = 19,
    Formula = 20,
    DuplexLink = 21,
    Location = 22,
    GroupChat = 23,
    Denied = 403,
    /**
     * 引用类型字段，前后端约定用10xx公共前缀开头
     */
    CreatedTime = 1001,
    ModifiedTime = 1002,
    CreatedUser = 1003,
    ModifiedUser = 1004,
    AutoNumber = 1005,
    Barcode = 99001,
    Progress = 99002,
    Currency = 99003,
    Rating = 99004
}
declare enum ViewType {
    NotSupport = 0,
    Grid = 1,
    Kanban = 2,
    Form = 3,
    Gallery = 4,
    Gantt = 5,
    Hierarchy = 6,
    Calendar = 7,
    WidgetView = 100
}
declare enum OperationType {
    Editable = "editable",
    Copyable = "copyable",
    Printable = "printable",
    Manageable = "manageable"
}
type BaseOperation = OperationType.Editable | OperationType.Manageable | OperationType.Copyable | OperationType.Printable;
declare enum UploadFileTaskStatus {
    Pending = 1,
    Inflight = 2,
    Success = 3,
    Error = 4,
    Paused = 5
}
type IUploadFileTaskItem = {
    uploadedSize: number;
    name: string;
    status: UploadFileTaskStatus;
    progress: number;
    uuid: string;
    token?: string;
    size: number;
    file: File;
};
type IUploadFileTask = {
    list: Array<IUploadFileTaskItem>;
};
type IUploadEventData = {
    data: {
        id: string;
        tasks: IUploadFileTask;
    };
};
type Locale = 'zh-CN' | 'zh-TW' | 'zh-HK' | 'en-US' | 'ja-JP' | 'fr-FR' | 'hi-IN' | 'id-ID' | 'it-IT' | 'ko-KR' | 'pt-BR' | 'ru-RU' | 'th-TH' | 'vi-VN' | 'de-DE' | 'es-ES';
type Language = 'zh' | 'zh-TW' | 'zh-HK' | 'en' | 'ja' | 'fr' | 'hi' | 'id' | 'it' | 'ko' | 'pt' | 'ru' | 'th' | 'vi' | 'de' | 'es';
/** 定位字段输入方式 **/
declare enum ELocationInputType {
    ONLY_MOBILE = "ONLY_MOBILE",
    NOT_LIMIT = "NOT_LIMIT"
}

declare abstract class ApiModule<C extends unknown[]> {
    context: C;
    /** 直接返回 string，不能引用 this，这里会被 register 从 prototype 上调用 */
    abstract getModuleName(): string;
    /**
     * @deprecated
     * 绑定 ApiModule 实例上下文并返回新实例
     *
     * @param context
     * @returns
     */
    withContext(context: C): this;
    /**
     * 获取 ApiModule 上下文
     * @returns
     */
    getContext(): C;
}

type BridgeModuleContext = never[];
declare enum ThemeModeType {
    LIGHT = "LIGHT",
    DARK = "DARK"
}
type ThemeModeCtx = {
    theme: ThemeModeType;
};
type HostMeta = {
    origin: string;
};
type GetBitableUrlOptions = Pick<Required<Selection>, 'tableId' | 'viewId'> & Pick<Selection, 'recordId' | 'fieldId'>;
interface IBridgeModule {
    /** 读取持久化数据 */
    getData(): Promise<unknown>;
    /**
     * 写入持久化数据
     * @param data 可序列化的数据
     */
    setData(data: Record<string, unknown>): Promise<void>;
    /**
     * 生成 bitable 链接
     * @param options tableId, viewId 必选，recordId 可选。recordId 为空时打开表格，不为空时打开卡片。
     */
    getBitableUrl(options: GetBitableUrlOptions): Promise<string>;
    getUserId(): Promise<string>;
    getTheme(): Promise<ThemeModeType>;
    getLocale(): Promise<Locale>;
    getLanguage(): Promise<Language>;
    getTenantKey(): Promise<string>;
}
interface IBridgeInner {
    registerBridgeEvent(event: BridgeEvent): Promise<void>;
    unregisterBridgeEvent(event: BridgeEvent): Promise<void>;
}

type WidgetBaseContext = never[];
type TableMeta = {
    id: string;
    name: string;
};
interface IWidgetBaseModule {
    /** 读取当前 table id, field id(仅 itemview 会返回), recordId(仅 itemview 会返回) */
    getSelection(): Promise<Selection>;
    /** 获取当前 base 下所有表元信息 */
    getTableMetaList(): Promise<TableMeta[]>;
    /**
     * 获取当前 base 的权限信息
     * @param type 权限类型，目前支持管理/编辑/复制/打印权限的判断
     */
    getBasePermission(type: BaseOperation): Promise<boolean>;
    /**
     * 是否在编辑模式
     */
    isEditable(): Promise<boolean>;
    /**
     * 文件上传
     * @param file
     * 每次上传任务 （File/FileList 都视为一次上传任务），返回一个任务 id, 用户通过这个 id 可在监听上传事件时筛选出对应的上传数据
     */
    uploadFile(file: File | FileList): Promise<string>;
}
interface IWidgetBaseInner {
    /**
     * 当前表是否存在
     */
    isTableExist(tableId: string): Promise<boolean>;
    /**
     * 通过表名获取表 id
     * @param name
     */
    getTableIdByName(name: string): Promise<string>;
    /**
     * 注册 base 事件，注册后 host 将会向 client 转发相关事件
     *
     * client 对任何一个事件最多有一个监听
     */
    registerBaseEvent(event: WidgetBaseEvent): Promise<void>;
    /**
     * 取消注册 base 事件，取消注册后 host 将停止向 client 转发相关事件
     *
     * client 对任何一个事件最多有一个监听
     */
    unregisterBaseEvent(event: WidgetBaseEvent): Promise<void>;
}

/**
 * FieldProperty
 */
/** Base */
type IBaseFieldProperty = object | null;
/** Text Field */
type ITextFieldProperty = IBaseFieldProperty;
/** Number Field */
interface INumberFieldProperty {
    formatter?: string;
}
/** DateTime Field */
type IDateTimeFieldProperty = IBaseFieldProperty;
type ICreatedTimeFieldProperty = IDateTimeFieldProperty;
type IModifiedTimeFieldProperty = IDateTimeFieldProperty;
/** Select Field */
interface ISelectFieldOption {
    id: string;
    name: string;
    color: number;
}
interface ISelectFieldProperty {
    options: ISelectFieldOption[];
}
/** Attachment Field */
type IAttachmentFieldProperty = IBaseFieldProperty;
/** Link Field */
interface ICommonLinkFieldProperty {
    tableId: string;
}
/** 单向关联 Field */
type ISingleLinkFieldProperty = ICommonLinkFieldProperty;
/** 双向关联 Field */
type IDuplexLinkFieldProperty = ICommonLinkFieldProperty;
/** Checkbox Field */
type ICheckboxProperty = IBaseFieldProperty;
/** User Field */
interface IUserFieldProperty {
    multiple?: boolean;
}
/** 创建用户 Field */
type ICreatedUserFieldProperty = IBaseFieldProperty;
/** 修改用户 Field */
type IModifiedUserFieldProperty = IBaseFieldProperty;
/** 查找应用 Field */
type ILookupFieldProperty = IBaseFieldProperty;
/** 公式 Field */
interface IFormulaFieldProperty {
    formula?: string;
    formatter?: string;
}
/** 超链接 Field */
type IUrlFieldProperty = IBaseFieldProperty;
/** 号码 Field */
type IPhoneFieldProperty = IBaseFieldProperty;
/** 位置 Field */
interface ILocationFieldProperty {
    inputType: ELocationInputType;
}
/** 群聊 Field */
interface IGroupChatFieldProperty {
    multiple?: boolean;
}
/** 条码 Field */
type IBarCodeFieldProperty = IBaseFieldProperty;
/** 进度 Field */
type IProgressFieldProperty = IBaseFieldProperty;
/** 货币 Field */
type ICurrencyFieldProperty = IBaseFieldProperty;
/** 评分 Field */
type IRatingFieldProperty = IBaseFieldProperty;
/** Denied Field */
type IDeniedFieldProperty = IBaseFieldProperty;
/** 自动编号 Field */
type IAutoNumberFieldProperty = IBaseFieldProperty;
/** NotSupport Field */
type INotSupportFieldProperty = IBaseFieldProperty;
type IFieldProperty = ITextFieldProperty | INumberFieldProperty | IDateTimeFieldProperty | ICreatedTimeFieldProperty | IModifiedTimeFieldProperty | ISelectFieldProperty | IAttachmentFieldProperty | ISingleLinkFieldProperty | IDuplexLinkFieldProperty | ICheckboxProperty | IUserFieldProperty | ICreatedUserFieldProperty | IModifiedUserFieldProperty | IFormulaFieldProperty | IUrlFieldProperty | IPhoneFieldProperty | ILocationFieldProperty | IGroupChatFieldProperty | IBarCodeFieldProperty | IProgressFieldProperty | ICurrencyFieldProperty | IRatingFieldProperty | IDeniedFieldProperty | IAutoNumberFieldProperty | INotSupportFieldProperty;
/** Field Meta */
interface IBaseFieldMeta {
    id: string;
    type: FieldType;
    name: string;
    property?: IBaseFieldProperty;
}
interface ITextFieldMeta extends IBaseFieldMeta {
    type: FieldType.Text;
    property?: ITextFieldProperty;
}
interface INumberFieldMeta extends IBaseFieldMeta {
    type: FieldType.Number;
    property?: INumberFieldProperty;
}
interface IDateTimeFieldMeta extends IBaseFieldMeta {
    type: FieldType.DateTime;
    property?: IDateTimeFieldProperty;
}
interface ICreatedTimeFieldMeta extends IBaseFieldMeta {
    type: FieldType.CreatedTime;
    property?: ICreatedTimeFieldProperty;
}
interface IModifiedTimeFieldMeta extends IBaseFieldMeta {
    type: FieldType.ModifiedTime;
    property?: IModifiedTimeFieldProperty;
}
interface ISelectFieldMeta extends IBaseFieldMeta {
    type: FieldType.SingleSelect | FieldType.MultiSelect;
    property?: ISelectFieldProperty;
}
interface IAttachmentFieldMeta extends IBaseFieldMeta {
    type: FieldType.Attachment;
    property?: IAttachmentFieldProperty;
}
interface ISingleLinkFieldMeta extends IBaseFieldMeta {
    type: FieldType.SingleLink;
    property?: ISingleLinkFieldProperty;
}
interface IDuplexLinkFieldMeta extends IBaseFieldMeta {
    type: FieldType.DuplexLink;
    property?: IDuplexLinkFieldProperty;
}
interface ICheckboxMeta extends IBaseFieldMeta {
    type: FieldType.Checkbox;
    property?: ICheckboxProperty;
}
interface IUserFieldMeta extends IBaseFieldMeta {
    type: FieldType.User;
    property?: IUserFieldProperty;
}
interface ICreatedUserFieldMeta extends IBaseFieldMeta {
    type: FieldType.CreatedUser;
    property?: ICreatedUserFieldProperty;
}
interface IModifiedUserFieldMeta extends IBaseFieldMeta {
    type: FieldType.ModifiedUser;
    property?: IModifiedUserFieldProperty;
}
interface IFormulaFieldMeta extends IBaseFieldMeta {
    type: FieldType.Formula;
    property?: IFormulaFieldProperty;
}
interface IUrlFieldMeta extends IBaseFieldMeta {
    type: FieldType.Url;
    property?: IUrlFieldProperty;
}
interface IPhoneFieldMeta extends IBaseFieldMeta {
    type: FieldType.Phone;
    property?: IPhoneFieldProperty;
}
interface ILocationFieldMeta extends IBaseFieldMeta {
    type: FieldType.Location;
    property?: ILocationFieldProperty;
}
interface IGroupChatFieldMeta extends IBaseFieldMeta {
    type: FieldType.GroupChat;
    property?: IGroupChatFieldProperty;
}
interface INotSupportFieldMeta extends IBaseFieldMeta {
    type: FieldType.NotSupport;
    property?: INotSupportFieldProperty;
}
interface IAutoNumberFieldMeta extends IBaseFieldMeta {
    type: FieldType.AutoNumber;
    property?: IAutoNumberFieldProperty;
}
interface IBarcodeFieldMeta extends IBaseFieldMeta {
    type: FieldType.Barcode;
    property?: IBarCodeFieldProperty;
}
interface IProgressFieldMeta extends IBaseFieldMeta {
    type: FieldType.Progress;
    property?: IProgressFieldProperty;
}
interface ICurrencyFieldMeta extends IBaseFieldMeta {
    type: FieldType.Currency;
    property?: ICurrencyFieldProperty;
}
interface IRatingFieldMeta extends IBaseFieldMeta {
    type: FieldType.Rating;
    property?: IRatingFieldProperty;
}
interface ILookupFieldMeta extends IBaseFieldMeta {
    type: FieldType.Lookup;
    property?: ILookupFieldProperty;
}
interface IDeniedFieldMeta extends IBaseFieldMeta {
    type: FieldType.Denied;
    property?: IDeniedFieldProperty;
}
type IFieldMeta = IBaseFieldMeta | ITextFieldMeta | INumberFieldMeta | IDateTimeFieldMeta | ICreatedTimeFieldMeta | IModifiedTimeFieldMeta | ISelectFieldMeta | IAttachmentFieldMeta | ISingleLinkFieldMeta | IDuplexLinkFieldMeta | ICheckboxMeta | IUserFieldMeta | ICreatedUserFieldMeta | IModifiedUserFieldMeta | IFormulaFieldMeta | IUrlFieldMeta | IPhoneFieldMeta | ILocationFieldMeta | IGroupChatFieldMeta | IAutoNumberFieldMeta | IBarcodeFieldMeta | IProgressFieldMeta | ICurrencyFieldMeta | IRatingFieldMeta | ILookupFieldMeta | IDeniedFieldMeta | INotSupportFieldMeta;
/** Field 配置信息 */
type IAddFieldConfig = Omit<IFieldMeta, 'id'>;
type ISetFieldConfig = Omit<IFieldMeta, 'id' | 'type'>;
type IFieldId = string;
type IFieldRes = IFieldId;

type IRecordValues = {
    fields: {
        [fieldId: string]: IOpenCellValue;
    };
};
type IRecordsValues = IRecordValues[];
type RecordId = string;
type IRecordRes = RecordId;

interface BaseViewMeta {
    id: string;
    name: string;
    type: ViewType;
}
type ViewMeta = BaseViewMeta;

/** [tableId] */
type WidgetTableContext = [string];
interface IWidgetTableModule {
    /** 获取表名 */
    getName(): Promise<string>;
    /** 添加字段 */
    addField(fieldConfig: IAddFieldConfig): Promise<IFieldRes>;
    /** 删除字段 */
    deleteField(fieldId: string): Promise<boolean>;
    /** 修改字段 */
    setField(fieldId: string, fieldConfig: ISetFieldConfig): Promise<IFieldRes>;
    /** 获取某个 field 元信息 */
    getFieldMetaById(fieldId: string): Promise<IFieldMeta>;
    /** 获取所有 field 元信息 */
    getFieldMetaList(): Promise<IFieldMeta[]>;
    /** 字段是否存在 */
    isFieldExist(fieldId: string): Promise<boolean>;
    /** 获取某个视图元信息 */
    getViewMetaById(viewId: string): Promise<ViewMeta>;
    /** 获取所有 视图 元信息 */
    getViewMetaList(): Promise<ViewMeta[]>;
    /** 视图是否存在 */
    isViewExist(viewId: string): Promise<boolean>;
    /**
     * 获取表中所有记录 Id
     * @param filter Bitable Foumula
     * @param sort Bitable Foumula
     * @returns
     */
    getRecordIdList(filter?: Formula, sort?: Sort): Promise<(string | undefined)[]>;
    /**
     * 获取单元格值
     * @param fieldId
     * @param recordId
     */
    getCellValue(fieldId: string, recordId: string): Promise<IOpenCellValue>;
    /**
     * 设置单元格的值
     * @param fieldId
     * @param recordId
     * @param cellValue
     */
    setCellValue<T extends IOpenCellValue = IOpenCellValue>(fieldId: string, recordId: string, cellValue: T): Promise<boolean>;
    /**
     * 获取 attachment 的 url
     * @param token
     * @param fieldId
     * @param recordId
     */
    getAttachmentUrl(token: string, fieldId?: string, recordId?: string): Promise<string>;
    /**
     * 批量获取指定单元格中的附件 url，通过 fieldId 和 recordId 指定附件所在的单元格
     * @param tokens
     * @param fieldId
     * @param recordId
     */
    getCellAttachmentUrls(tokens: string[], fieldId: string, recordId: string): Promise<string[]>;
    /**
     * 批量获取指定单元格中的附件缩略图 url，通过 fieldId 和 recordId 指定附件所在的单元格
     * @param tokens
     * @param fieldId
     * @param recordId
     */
    getCellThumbnailUrls(tokens: string[], fieldId: string, recordId: string): Promise<string[]>;
    /**
     * 增加一条记录
     * @param recordValues
     */
    addRecord(recordValues?: IRecordValues): Promise<IRecordRes>;
    /**
     * 修改一条记录
     * @param recordId
     * @param recordValues
     */
    setRecord(recordId: string, recordValues?: IRecordValues): Promise<IRecordRes>;
    /**
     * 删除一条记录
     * @param recordId
     */
    deleteRecord(recordId: string): Promise<boolean>;
    /** 获取 cellValue 并转化为 string 格式 */
    getCellString(fieldId: string, recordId: string): Promise<string>;
}
interface IWidgetTableInner {
    /**
     * 通过字段名获取字段 id
     * @param name
     */
    getFieldIdByName(name: string): Promise<string>;
    /**
     * 注册 table 事件，注册后 host 将会向 client 转发相关事件
     *
     * client 对任何一个事件最多有一个监听
     */
    registerTableEvent(event: WidgetTableEvent): Promise<void>;
    /**
     * 取消注册 table 事件，取消注册后 host 将停止向 client 转发相关事件
     *
     * client 对任何一个事件最多有一个监听
     */
    unregisterTableEvent(event: WidgetTableEvent): Promise<void>;
}

/** [tableId, fieldId] */
type WidgetFieldContext = [string, string];
interface IFieldValue {
    record_id: string;
    value: IOpenCellValue;
}
interface IUndefinedFieldValue {
    record_id: undefined;
    value: undefined;
}
interface IWidgetFieldModule {
    /** 获取字段名 */
    getName(): Promise<string>;
    /** 获取字段类型 */
    getType(): Promise<FieldType>;
    /** 获取公式代理列类型 */
    getProxyType(): Promise<FieldType | void>;
    /** 获取 cellValue 并转化为 string 格式 */
    getCellString(recordId: string): Promise<string>;
    /** 获取当前 field meta 信息 */
    getMeta(): Promise<IFieldMeta>;
    /**
     * 获取整列 cellValue
     * @param filter Bitable Foumula
     * @param sort Bitable Foumula
     */
    getFieldValueList(filter?: Formula, sort?: Sort): Promise<(IFieldValue | IUndefinedFieldValue)[]>;
}
interface IWidgetFieldInner {
    /**
     * 注册 field 事件，注册后 host 将会向 client 转发相关事件
     *
     * client 对任何一个事件最多有一个监听
     */
    registerFieldEvent(event: WidgetFieldEvent): Promise<void>;
    /**
     * 取消注册 field 事件，取消注册后 host 将停止向 client 转发相关事件
     *
     * client 对任何一个事件最多有一个监听
     */
    unregisterFieldEvent(event: WidgetFieldEvent): Promise<void>;
}

/** [tableId, viewId] */
type WidgetViewContext = [string, string];
interface IWidgetViewModule {
    /** 获取字段名 */
    getName(): Promise<string>;
    /** 获取视图类型 */
    getType(): Promise<ViewType>;
    /** 获取字段列表（有序） */
    getFieldMetaList(): Promise<IFieldMeta[]>;
    /** 获取记录 ID 列表 */
    getVisibleRecordIdList(): Promise<(string | undefined)[]>;
}
interface IWidgetViewInner {
}

/**
 * 私有 API 模块
 */
interface IPrivateModule {
    /**
     * 设置 client 版本
     * @param version
     */
    setClientVersion(version: string): Promise<void>;
}

/**
 * 调试接口的时候可能看到 c 和 p 比较迷惑，这里主要是为了节省传输开销
 * 在 10000 行 getCellValue 测试中，使用短名称优化可以提高 2% 的性能
 */
interface TransferType {
    /**
     * 指 context，为了节省传输开销所以用 c 简写
     *
     * 推荐使用数组，暂时为了风格统一强制指定为数组
     */
    c: unknown[];
    /**
     * 指 params ，为了节省传输开销所以用 p 简写，参数会被直接 apply 给 host 上的函数
     */
    p: unknown[];
}

declare const baseEventPrefix = "BaseEvent";
declare const tableEventPrefix = "TableEvent";
declare const fieldEventPrefix = "FieldEvent";
declare const bridgeEventPrefix = "BridgeEvent";
declare const getBaseEventKey: (eventName: WidgetBaseEvent) => string;
declare const getTableEventKey: (tableId: string, eventName: WidgetTableEvent) => string;
declare const getFieldEventKey: (tableId: string, fieldId: string, eventName: WidgetFieldEvent) => string;
declare const getBridgeEventKey: (eventName: BridgeEvent) => string;

declare function createApiKey(moduleName: string, methodName: string): string;
declare function createCompatibleApiKey(moduleName: string, methodName: string): string;
declare function getNeedTransformApiKeyMap(): {
    WidgetBase_getBasePermission: string;
    WidgetBase_registerBaseEvent: string;
    WidgetBase_getSelection: string;
    WidgetBase_isTableExist: string;
    WidgetTable_getCellValue: string;
    WidgetBase_getTableMetaList: string;
    WidgetTable_getName: string;
    WidgetTable_isFieldExist: string;
    WidgetField_getName: string;
    WidgetTable_isViewExist: string;
    WidgetView_getName: string;
    WidgetBase_getTableIdByName: string;
    WidgetBase_isEditable: string;
    WidgetBase_unregisterBaseEvent: string;
    WidgetBase_uploadFile: string;
    WidgetTable_getFieldMetaById: string;
    WidgetTable_getFieldMetaList: string;
    WidgetTable_getViewMetaById: string;
    WidgetTable_getViewMetaList: string;
    WidgetTable_getFieldIdByName: string;
    WidgetTable_getRecordIdList: string;
    WidgetTable_setCellValue: string;
    WidgetTable_addRecord: string;
    WidgetTable_setRecord: string;
    WidgetTable_deleteRecord: string;
    WidgetTable_registerTableEvent: string;
    WidgetTable_unregisterTableEvent: string;
    WidgetTable_getAttachmentUrl: string;
    WidgetField_getType: string;
    WidgetField_getMeta: string;
    WidgetField_getProxyType: string;
    WidgetField_getFieldValueList: string;
    WidgetField_registerFieldEvent: string;
    WidgetField_unregisterFieldEvent: string;
    WidgetView_getType: string;
    WidgetView_getFieldMetaList: string;
    WidgetView_getVisibleRecordIdList: string;
    WidgetBase_getTableList: string;
    WidgetBase_getTableById: string;
    WidgetBase_onTableAdd: string;
    WidgetBase_onTableDelete: string;
    WidgetBase_onSelectionChange: string;
    WidgetBase_onUploadStatusChange: string;
    WidgetTable_getFieldList: string;
    WidgetTable_getFieldById: string;
    WidgetTable_getViewById: string;
    WidgetTable_onFieldAdd: string;
    WidgetTable_onFieldDelete: string;
    WidgetTable_onFieldModify: string;
    WidgetTable_onRecordModify: string;
    WidgetTable_getCellAttachmentUrls: string;
};

declare function isUsers(value: unknown): value is IOpenUser[];
declare function isLocation(value: unknown): value is IOpenLocation;
declare function isAttachments(value: unknown): value is IOpenAttachment[];
declare function isTimestamp(value: unknown): value is IOpenTimestamp;
declare function isCheckbox(value: unknown): value is IOpenCheckbox;
declare function isPhone(value: unknown): value is IOpenPhone;
declare function isAutoNumber(value: unknown): value is IOpenAutoNumber;
declare function isNumber(value: unknown): value is IOpenNumber;
declare function isSingleSelect(value: unknown): value is IOpenSingleSelect;
declare function isMultiSelect(value: unknown): value is IOpenMultiSelect;
declare function isEmpty(value: unknown): value is null;
declare function isSegments(value: unknown): value is IOpenSegment[];
declare function isLink(value: unknown): value is IOpenLink;
declare function isGroupChat(value: unknown): value is IOpenGroupChat;

declare const cell_checkers_isUsers: typeof isUsers;
declare const cell_checkers_isLocation: typeof isLocation;
declare const cell_checkers_isAttachments: typeof isAttachments;
declare const cell_checkers_isTimestamp: typeof isTimestamp;
declare const cell_checkers_isCheckbox: typeof isCheckbox;
declare const cell_checkers_isPhone: typeof isPhone;
declare const cell_checkers_isAutoNumber: typeof isAutoNumber;
declare const cell_checkers_isNumber: typeof isNumber;
declare const cell_checkers_isSingleSelect: typeof isSingleSelect;
declare const cell_checkers_isMultiSelect: typeof isMultiSelect;
declare const cell_checkers_isEmpty: typeof isEmpty;
declare const cell_checkers_isSegments: typeof isSegments;
declare const cell_checkers_isLink: typeof isLink;
declare const cell_checkers_isGroupChat: typeof isGroupChat;
declare namespace cell_checkers {
  export {
    cell_checkers_isUsers as isUsers,
    cell_checkers_isLocation as isLocation,
    cell_checkers_isAttachments as isAttachments,
    cell_checkers_isTimestamp as isTimestamp,
    cell_checkers_isCheckbox as isCheckbox,
    cell_checkers_isPhone as isPhone,
    cell_checkers_isAutoNumber as isAutoNumber,
    cell_checkers_isNumber as isNumber,
    cell_checkers_isSingleSelect as isSingleSelect,
    cell_checkers_isMultiSelect as isMultiSelect,
    cell_checkers_isEmpty as isEmpty,
    cell_checkers_isSegments as isSegments,
    cell_checkers_isLink as isLink,
    cell_checkers_isGroupChat as isGroupChat,
  };
}

/************************
 * Bitable 高位域（ab）码 *
 ************************/
declare const UnknownScopeCode = 0;
/**
 * 核心域点位
 * 10：未知
 */
declare const CoreScopeCode: {
    readonly Unknown: 10;
    readonly Base: 11;
    readonly Table: 12;
    readonly Field: 13;
    readonly Record: 14;
    readonly View: 15;
};
/**
 * 开放域点位
 * 80-89：FaaS 点位
 * 90-98：Widget 点位
 * 99：未知点位
 */
declare const OpenScopeCode: {
    readonly Action: 89;
    readonly ViewWidget: 96;
    readonly ItemWidget: 97;
    readonly Widget: 98;
    readonly Unknown: 99;
};
type ValueOf<T> = T[keyof T];
type CoreScopeCodeType = ValueOf<typeof CoreScopeCode>;
type OpenScopeCodeType = ValueOf<typeof OpenScopeCode>;
type ErrorScopeCodeType = typeof UnknownScopeCode | CoreScopeCodeType | OpenScopeCodeType;
/************************
 * Bitable 低位域（xyz）码 *
 ************************/
/**
 * Bitable 核心域通用错误
 */
declare const CoreCommonDetailCode: {
    /** 超出下限 */
    readonly LowerLimitExceeded: 993;
    /** 超出上限 */
    readonly UpperLimitExceeded: 994;
    /** 命名重复 */
    readonly NameRepeated: 995;
    /** 不支持的操作，常见于对旧版本操作 */
    readonly NotSupported: 998;
    /** 权限拒绝 */
    readonly PermissionDenied: 997;
    /** 不存在 */
    readonly NotFound: 998;
    /** 未知错误 */
    readonly Unknown: 999;
};
/**
 * Bitable 开放域通用错误码
 */
declare const OpenCommonDetailCode: {
    /** Host 未注册 API */
    readonly HostNotRegistered: 997;
    /** 不存在 */
    readonly NotFound: 998;
    /** 未知错误 */
    readonly Unknown: 999;
};
/**
 * Bitable 低位（xyz）详情错误码
 */
declare const DetailCode: {
    readonly 11: {
        /** 超出下限 */
        readonly LowerLimitExceeded: 993;
        /** 超出上限 */
        readonly UpperLimitExceeded: 994;
        /** 命名重复 */
        readonly NameRepeated: 995;
        /** 不支持的操作，常见于对旧版本操作 */
        readonly NotSupported: 998;
        /** 权限拒绝 */
        readonly PermissionDenied: 997;
        /** 不存在 */
        readonly NotFound: 998;
        /** 未知错误 */
        readonly Unknown: 999;
    };
    readonly 12: {
        /** 超出下限 */
        readonly LowerLimitExceeded: 993;
        /** 超出上限 */
        readonly UpperLimitExceeded: 994;
        /** 命名重复 */
        readonly NameRepeated: 995;
        /** 不支持的操作，常见于对旧版本操作 */
        readonly NotSupported: 998;
        /** 权限拒绝 */
        readonly PermissionDenied: 997;
        /** 不存在 */
        readonly NotFound: 998;
        /** 未知错误 */
        readonly Unknown: 999;
    };
    readonly 13: {
        /** 超出下限 */
        readonly LowerLimitExceeded: 993;
        /** 超出上限 */
        readonly UpperLimitExceeded: 994;
        /** 命名重复 */
        readonly NameRepeated: 995;
        /** 不支持的操作，常见于对旧版本操作 */
        readonly NotSupported: 998;
        /** 权限拒绝 */
        readonly PermissionDenied: 997;
        /** 不存在 */
        readonly NotFound: 998;
        /** 未知错误 */
        readonly Unknown: 999;
        /** 字段类型不匹配 */
        readonly NotMatch: 1;
    };
    readonly 14: {
        /** 超出下限 */
        readonly LowerLimitExceeded: 993;
        /** 超出上限 */
        readonly UpperLimitExceeded: 994;
        /** 命名重复 */
        readonly NameRepeated: 995;
        /** 不支持的操作，常见于对旧版本操作 */
        readonly NotSupported: 998;
        /** 权限拒绝 */
        readonly PermissionDenied: 997;
        /** 不存在 */
        readonly NotFound: 998;
        /** 未知错误 */
        readonly Unknown: 999;
    };
    readonly 15: {
        /** 超出下限 */
        readonly LowerLimitExceeded: 993;
        /** 超出上限 */
        readonly UpperLimitExceeded: 994;
        /** 命名重复 */
        readonly NameRepeated: 995;
        /** 不支持的操作，常见于对旧版本操作 */
        readonly NotSupported: 998;
        /** 权限拒绝 */
        readonly PermissionDenied: 997;
        /** 不存在 */
        readonly NotFound: 998;
        /** 未知错误 */
        readonly Unknown: 999;
    };
    readonly 97: {
        /** Host 未注册 API */
        readonly HostNotRegistered: 997;
        /** 不存在 */
        readonly NotFound: 998;
        /** 未知错误 */
        readonly Unknown: 999;
    };
    readonly 89: {
        /** Host 未注册 API */
        readonly HostNotRegistered: 997;
        /** 不存在 */
        readonly NotFound: 998;
        /** 未知错误 */
        readonly Unknown: 999;
    };
    readonly 96: {
        /** Host 未注册 API */
        readonly HostNotRegistered: 997;
        /** 不存在 */
        readonly NotFound: 998;
        /** 未知错误 */
        readonly Unknown: 999;
    };
};
/**
 * 自定义错误信息
 */
declare const DetailMessage: {
    [scopeCode in ErrorScopeCodeType]?: {
        [detailCode: number]: string;
    };
};

declare const BitableTransferableErrorSign = "bte";
interface TransferableError {
    e: typeof BitableTransferableErrorSign;
    /**
     * @deprecated
     */
    msg: string;
    code: number;
    message: string;
}

declare class OpenError extends Error {
    readonly code: number;
    constructor(scopeCode: ErrorScopeCodeType, detailCode: number, message?: string);
    toJSON(): TransferableError;
}

interface IEventCbCtx<DataType = unknown> {
    data: DataType;
}
interface IEventManager<T> {
    /**
     * 监听事件
     * @param event
     * @param callback
     */
    on<Data = unknown>(event: T, callback: (ev: IEventCbCtx<Data>) => void): void;
    /**
     * 移除事件监听
     * @param event
     * @param callback
     */
    off<Data = unknown>(event: T, callback: (ev: IEventCbCtx<Data>) => void): void;
    /**
     * 监听事件并返回取消监听函数
     * @param event
     * @param callback
     */
    bind<Data = unknown>(event: T, callback: (ev: IEventCbCtx<Data>) => void): () => void;
}

interface IWidgetField extends IWidgetFieldModule {
    id: string;
    tableId: string;
}
declare class WidgetFieldModule extends ApiModule<WidgetFieldContext> implements IWidgetField, IWidgetFieldInner, IEventManager<WidgetFieldEvent> {
    get id(): string;
    get tableId(): string;
    getModuleName(): string;
    on<Data = unknown>(event: WidgetFieldEvent, callback: (ev: IEventCbCtx<Data>) => void): void;
    off<Data = unknown>(event: WidgetFieldEvent, callback: (ev: IEventCbCtx<Data>) => void): void;
    bind<Data = unknown>(event: WidgetFieldEvent, callback: (ev: IEventCbCtx<Data>) => void): () => void;
    getName(): Promise<string>;
    getType(): Promise<FieldType>;
    getProxyType(): Promise<FieldType | void>;
    getCellString(recordId: string): Promise<string>;
    getMeta(): Promise<IFieldMeta>;
    getFieldValueList(filter?: Formula, sort?: Sort): Promise<{
        record_id: string;
        value: IOpenCellValue;
    }[]>;
    registerFieldEvent(event: WidgetFieldEvent): Promise<void>;
    unregisterFieldEvent(event: WidgetFieldEvent): Promise<void>;
}

interface IWidgetView extends IWidgetViewModule {
    id: string;
    tableId: string;
}

interface IWidgetTable extends IWidgetTableModule {
    id: string;
    /** 获取字段列表 */
    getFieldList(): Promise<IWidgetField[]>;
    /**
     * @deprecated The method will be removed, use getFieldMetaList instead!
     */
    getFieldIdList(): Promise<string[]>;
    /**
     * 根据字段 id 获取字段
     * @param fieldId
     */
    getFieldById(fieldId: string): Promise<IWidgetField>;
    /**
     * 根据字段名称获取字段
     * @param name
     */
    getFieldByName(name: string): Promise<IWidgetField>;
    /**
     * 监听 Field 添加事件
     * @param callback 回调函数
     */
    onFieldAdd(callback: (ev: IEventCbCtx) => void): () => void;
    /**
     * 监听 Field 删除事件
     * @param callback 回调函数
     */
    onFieldDelete(callback: (ev: IEventCbCtx) => void): () => void;
    /**
     * 监听 Field 修改事件
     * @param callback 回调函数
     */
    onFieldModify(callback: (ev: IEventCbCtx) => void): () => void;
    /**
     * 监听 Record 修改事件
     * @param callback 回调函数
     */
    onRecordModify(callback: (ev: IEventCbCtx<{
        recordId: string;
        fieldIds: string[];
    }>) => void): () => void;
    /**
     * 根据字段 id 获取视图
     * @param viewId
     */
    getViewById(viewId: string): Promise<IWidgetView>;
}
declare class WidgetTableModule extends ApiModule<WidgetTableContext> implements IWidgetTable, IWidgetTableInner, IEventManager<WidgetTableEvent> {
    private readonly fieldMap;
    private readonly viewMap;
    get id(): string;
    getModuleName(): string;
    /**
     * 返回 WidgetField，并且维护 fieldMap，保证 field 单例化。
     * @param fieldId
     * @returns
     */
    private getChildWidgetField;
    getViewById(viewId: string): Promise<IWidgetView>;
    private getChildWidgetView;
    getViewList(): Promise<IWidgetView[]>;
    getFieldList(): Promise<IWidgetField[]>;
    getFieldById(fieldId: string): Promise<IWidgetField>;
    getFieldByName(name: string): Promise<IWidgetField>;
    onFieldAdd(callback: (ev: IEventCbCtx) => void): () => void;
    onFieldDelete(callback: (ev: IEventCbCtx) => void): () => void;
    onFieldModify(callback: (ev: IEventCbCtx) => void): () => void;
    onRecordModify(callback: (ev: IEventCbCtx<{
        recordId: string;
        fieldIds: string[];
    }>) => void): () => void;
    on<Data = unknown>(event: WidgetTableEvent, callback: (ev: IEventCbCtx<Data>) => void): void;
    off<Data = unknown>(event: WidgetTableEvent, callback: (ev: IEventCbCtx<Data>) => void): void;
    bind<Data = unknown>(event: WidgetTableEvent, callback: (ev: IEventCbCtx<Data>) => void): () => void;
    getRecordIdList(filter?: Formula, sort?: Sort): Promise<string[]>;
    getName(): Promise<string>;
    /** view api */
    isViewExist(viewId: string): Promise<boolean>;
    getViewMetaById(viewId: string): Promise<ViewMeta>;
    getViewMetaList(): Promise<ViewMeta[]>;
    isFieldExist(fieldId: string): Promise<boolean>;
    /**
     * @deprecated The method will be removed, use getFieldMetaList instead!
     */
    getFieldIdList(): Promise<string[]>;
    getFieldMetaById(fieldId: string): Promise<IFieldMeta>;
    getFieldMetaList(): Promise<IFieldMeta[]>;
    getFieldIdByName(name: string): Promise<string>;
    getCellValue(fieldId: string, recordId: string): Promise<IOpenCellValue>;
    setCellValue(fieldId: string, recordId: string, cellValue: IOpenCellValue): Promise<boolean>;
    registerTableEvent(event: WidgetTableEvent): Promise<void>;
    unregisterTableEvent(event: WidgetTableEvent): Promise<void>;
    getAttachmentUrl(token: string, fieldId?: string, recordId?: string): Promise<string>;
    getCellAttachmentUrls(tokens: string[], fieldId: string, recordId: string): Promise<string[]>;
    getCellThumbnailUrls(tokens: string[], fieldId: string, recordId: string): Promise<string[]>;
    addRecord(recordValues?: IRecordValues): Promise<IRecordRes>;
    setRecord(recordId: string, recordValues?: IRecordValues): Promise<IRecordRes>;
    deleteRecord(recordId: string): Promise<boolean>;
    getCellString(fieldId: string, recordId: string): Promise<string>;
    addField({ type, name, property }: IAddFieldConfig): Promise<IFieldRes>;
    deleteField(fieldId: string): Promise<boolean>;
    setField(fieldId: string, { name, property }: ISetFieldConfig): Promise<IFieldRes>;
}

interface IWidgetBase extends IWidgetBaseModule {
    /** 获取当前 base 下所有表 */
    getTableList(): Promise<IWidgetTable[]>;
    /**
     * 通过表 id 获取表
     * @param tableId
     */
    getTableById(tableId: string): Promise<IWidgetTable>;
    /**
     * 通过表名获取表
     * @param name
     */
    getTableByName(name: string): Promise<IWidgetTable>;
    /**
     * 监听 Table 添加事件
     * @param callback 回调函数
     */
    onTableAdd(callback: (e: IEventCbCtx) => void): () => void;
    /**
     * 监听 Table 删除事件
     * @param callback 回调函数
     */
    onTableDelete(callback: (e: IEventCbCtx) => void): () => void;
    /**
     * 监听选中改变事件
     * @param callback 回调函数，参数为当前选中的 base/table/field/record ID 集合
     */
    onSelectionChange(callback: (e: IEventCbCtx<Selection>) => void): () => void;
    /**
     * 监听权限变化
     * @param callback 回调函数
     */
    onPermissionChange(callback: () => void): () => void;
    /**
     * 监听上传文件的状态变化
     * @param callback
     */
    onUploadStatusChange(callback: (data: IUploadEventData) => void): () => void;
}
declare class WidgetBaseModule extends ApiModule<WidgetBaseContext> implements IWidgetBase, IWidgetBaseInner, IEventManager<WidgetBaseEvent> {
    private readonly tableMap;
    /** 用于同步读取可打印权限 */
    private _isPrintable;
    constructor();
    getModuleName(): string;
    /** 协同 Printable 权限状态 */
    private refreshPrintableState;
    /** 无打印权限时将打印内容设置为空 */
    private checkPrintPermissionDefault;
    /**
     * 返回 WidgetTable，并且维护 tableMap，保证 table 单例化。
     * @param tableId
     * @returns
     */
    private getChildWidgetTable;
    getTableList(): Promise<IWidgetTable[]>;
    getTableById(tableId: string): Promise<IWidgetTable>;
    getTableByName(name: string): Promise<IWidgetTable>;
    /**
     * 监听 Table 删除事件
     * @param callback 回调函数
     */
    onTableAdd(callback: (e: IEventCbCtx) => void): () => void;
    onTableDelete(callback: (e: IEventCbCtx) => void): () => void;
    /**
     * 监听选中改变事件
     * @param callback 回调函数，data 为当前选中的 base/table/field/record ID 集合
     */
    onSelectionChange(callback: (e: IEventCbCtx<Selection>) => void): () => void;
    onPermissionChange(callback: () => void): () => void;
    onUploadStatusChange(callback: (data: IUploadEventData) => void): () => void;
    on<Data = unknown>(event: WidgetBaseEvent, callback: (ev: IEventCbCtx<Data>) => void): void;
    off<Data = unknown>(event: WidgetBaseEvent, callback: (ev: IEventCbCtx<Data>) => void): void;
    bind<Data = unknown>(event: WidgetBaseEvent, callback: (ev: IEventCbCtx<Data>) => void): () => void;
    isTableExist(tableId: string): Promise<boolean>;
    /**
     * @deprecated The method will be removed, use getTableMetaList instead!
     */
    getTableIdList(): Promise<string[]>;
    getTableMetaList(): Promise<TableMeta[]>;
    getTableIdByName(name: string): Promise<string>;
    isEditable(): Promise<boolean>;
    getBasePermission(type: BaseOperation): Promise<boolean>;
    registerBaseEvent(event: WidgetBaseEvent): Promise<void>;
    unregisterBaseEvent(event: WidgetBaseEvent): Promise<void>;
    getSelection(): Promise<Selection>;
    uploadFile(file: File | FileList): Promise<string>;
}

interface IBridge extends IBridgeModule {
    onThemeChange(callback: (ev: IEventCbCtx<ThemeModeCtx>) => void): () => void;
}
declare class BridgeModule extends ApiModule<BridgeModuleContext> implements IBridge, IBridgeInner, IEventManager<BridgeEvent> {
    getModuleName(): string;
    getBitableUrl(options: GetBitableUrlOptions): Promise<string>;
    getData(): Promise<unknown>;
    setData(data: Record<string, unknown>): Promise<void>;
    registerBridgeEvent(event: BridgeEvent): Promise<void>;
    unregisterBridgeEvent(event: BridgeEvent): Promise<void>;
    getUserId(): Promise<string>;
    getTheme(): Promise<ThemeModeType>;
    /**
     * 监听外观变化
     * @param callback 回调函数
     */
    onThemeChange(callback: (ev: IEventCbCtx<ThemeModeCtx>) => void): () => void;
    getLocale(): Promise<Locale>;
    getLanguage(): Promise<Language>;
    getTenantKey(): Promise<string>;
}

/**
 * 私有 API 模块
 */
declare class PrivateModule extends ApiModule<[]> implements IPrivateModule {
    getModuleName(): string;
    setClientVersion(version: string): Promise<void>;
}

declare global {
    const PACKAGE_VERSION: string;
}
declare class BitableApp {
    /** bitable base */
    readonly base: IWidgetBase;
    /** open platform api */
    readonly bridge: IBridge;
}
declare const bitable: BitableApp;

export { ApiModule, BaseOperation, BaseViewMeta, BitableTransferableErrorSign, BridgeEvent, BridgeModule, BridgeModuleContext, CoreCommonDetailCode, CoreScopeCode, CoreScopeCodeType, DetailCode, DetailMessage, ELocationInputType, ErrorScopeCodeType, FieldType, Formula, GetBitableUrlOptions, HostMeta, IAddFieldConfig, IAttachmentFieldMeta, IAttachmentFieldProperty, IAutoNumberFieldMeta, IAutoNumberFieldProperty, IBarCodeFieldProperty, IBarcodeFieldMeta, IBaseFieldMeta, IBaseFieldProperty, IBridge, IBridgeInner, IBridgeModule, ICheckboxMeta, ICheckboxProperty, ICommonLinkFieldProperty, ICreatedTimeFieldMeta, ICreatedTimeFieldProperty, ICreatedUserFieldMeta, ICreatedUserFieldProperty, ICurrencyFieldMeta, ICurrencyFieldProperty, IDateTimeFieldMeta, IDateTimeFieldProperty, IDeniedFieldMeta, IDeniedFieldProperty, IDuplexLinkFieldMeta, IDuplexLinkFieldProperty, IFieldId, IFieldMeta, IFieldProperty, IFieldRes, IFormulaFieldMeta, IFormulaFieldProperty, IGroupChatFieldMeta, IGroupChatFieldProperty, ILocationFieldMeta, ILocationFieldProperty, ILookupFieldMeta, ILookupFieldProperty, IModifiedTimeFieldMeta, IModifiedTimeFieldProperty, IModifiedUserFieldMeta, IModifiedUserFieldProperty, INotSupportFieldMeta, INotSupportFieldProperty, INumberFieldMeta, INumberFieldProperty, IOpenAttachment, IOpenAutoNumber, IOpenCellValue, IOpenCheckbox, IOpenDocumentMentionSegment, IOpenFormulaCellValue, IOpenFormulaFuncCellValue, IOpenFormulaProxyCellValue, IOpenGroupChat, IOpenLink, IOpenLocation, IOpenMentionSegment, IOpenMultiSelect, IOpenNumber, IOpenPhone, IOpenSegment, IOpenSegmentType, IOpenSingleCellValue, IOpenSingleSelect, IOpenTextSegment, IOpenTimestamp, IOpenUrlSegment, IOpenUser, IOpenUserMentionSegment, IPhoneFieldMeta, IPhoneFieldProperty, IPrivateModule, IProgressFieldMeta, IProgressFieldProperty, IRatingFieldMeta, IRatingFieldProperty, IRecordRes, IRecordValues, IRecordsValues, ISelectFieldMeta, ISelectFieldOption, ISelectFieldProperty, ISetFieldConfig, ISingleLinkFieldMeta, ISingleLinkFieldProperty, ITextFieldMeta, ITextFieldProperty, IUploadEventData, IUploadFileTask, IUploadFileTaskItem, IUrlFieldMeta, IUrlFieldProperty, IUserFieldMeta, IUserFieldProperty, IWidgetBase, IWidgetBaseInner, IWidgetBaseModule, IWidgetField, IWidgetFieldInner, IWidgetFieldModule, IWidgetTable, IWidgetTableInner, IWidgetTableModule, IWidgetViewInner, IWidgetViewModule, Language, Locale, OpenCommonDetailCode, OpenError, OpenMentionType, OpenMentionTypeMap, OpenScopeCode, OpenScopeCodeType, OperationType, PrivateModule, RecordId, Selection, Sort, TableMeta, ThemeModeCtx, ThemeModeType, TransferType, TransferableError, UnknownScopeCode, UploadFileTaskStatus, ViewMeta, ViewType, WidgetBaseContext, WidgetBaseEvent, WidgetBaseModule, WidgetFieldContext, WidgetFieldEvent, WidgetFieldModule, WidgetTableContext, WidgetTableEvent, WidgetTableModule, WidgetViewContext, baseEventPrefix, bitable, bridgeEventPrefix, cell_checkers as checkers, createApiKey, createCompatibleApiKey, fieldEventPrefix, getBaseEventKey, getBridgeEventKey, getFieldEventKey, getNeedTransformApiKeyMap, getTableEventKey, tableEventPrefix };
